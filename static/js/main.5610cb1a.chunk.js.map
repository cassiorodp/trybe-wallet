{"version":3,"sources":["images/bitcoin.gif","actions/index.js","pages/Login.js","components/WalletInput.js","components/WalletSelect.js","components/WalletTable.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/store.js","index.js"],"names":["module","exports","coinsLoading","type","coinsFail","error","spentSuccess","payload","exchangeRates","spent","fetchCoinAPI","a","fetch","apiResponse","json","apiJson","USDT","Login","props","state","email","password","buttonDisable","checkEmail","checkPassword","handleChange","bind","renderInputs","validateLogin","validateEmail","validatePassword","changePage","match","this","setState","length","target","id","value","history","storeEmail","push","htmlFor","data-testid","onChange","src","bitcoinGif","alt","disabled","onClick","React","Component","connect","dispatch","getUserEmail","WalletInputs","labelText","WalletSelect","ariaLabel","currencies","aria-label","map","coin","key","WalletTable","handleDelete","itemId","deleteSpent","expenses","renderTableHead","item","style","textAlign","description","tag","method","currency","parseInt","toFixed","name","split","parseFloat","ask","wallet","Wallet","addButton","renderHeader","renderForms","getCoinsOptions","handleExpenses","totalExpenses","checkInputs","fetchCoins","dispatchSpent","reduce","itemAcc","convertedValue","WalletInput","user","coinsLabel","coins","Object","keys","addSpent","App","exact","path","component","Boolean","window","location","hostname","INICIAL_STATE","action","isLoading","filter","rootReducer","combineReducers","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5610cb1a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bitcoin.1a3bd732.gif\";","// Coloque aqui suas actions\n\nexport const GET_USER_EMAIL = 'GET_USER_EMAIL';\n\nexport const COINS_LOADING = 'COINS_LOADING';\nexport const COINS_SUCCESS = 'COINS_SUCCESS';\nexport const COINS_FAIL = 'COINS_FAIL';\n\nexport const SPENT_SUCCESS = 'SPENT_SUCCESS';\n\nexport const DELETE_ITEM = 'DELETE_ITEM';\n\nexport const getUserEmail = (payload) => ({\n  type: GET_USER_EMAIL,\n  email: payload,\n});\n\nconst coinsLoading = () => ({ type: COINS_LOADING });\nconst coinsSuccess = (coins) => ({\n  type: COINS_SUCCESS,\n  coins,\n});\nconst coinsFail = (error) => ({\n  type: COINS_FAIL,\n  error,\n});\n\nconst spentSuccess = (payload, exchangeRates) => ({\n  type: SPENT_SUCCESS,\n  spent: {\n    ...payload,\n    exchangeRates,\n  },\n});\n\nexport const deleteRow = (itemId) => ({\n  type: DELETE_ITEM,\n  itemId,\n});\n\n// Tip from Murilo Rainho\nconst fetchCoinAPI = async () => {\n  const apiResponse = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const apiJson = await apiResponse.json();\n  delete apiJson.USDT;\n  return apiJson;\n};\n\nexport const getCoins = () => async (dispatch) => {\n  dispatch(coinsLoading);\n  try {\n    const coinsLabel = await fetchCoinAPI();\n    // Tip from Murilo Rainho\n    dispatch(coinsSuccess(Object.keys(coinsLabel)));\n  } catch (error) {\n    dispatch(coinsFail(error));\n  }\n};\n\nexport const addSpent = (payload) => async (dispatch) => {\n  dispatch(coinsLoading);\n  try {\n    const exchangeRates = await fetchCoinAPI();\n    dispatch(spentSuccess(payload, exchangeRates));\n  } catch (error) {\n    dispatch(coinsFail(error));\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport bitcoinGif from '../images/bitcoin.gif';\nimport { getUserEmail } from '../actions';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      password: '',\n      buttonDisable: true,\n      checkEmail: false,\n      checkPassword: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.renderInputs = this.renderInputs.bind(this);\n    this.validateLogin = this.validateLogin.bind(this);\n    this.validateEmail = this.validateEmail.bind(this);\n    this.validatePassword = this.validatePassword.bind(this);\n    this.changePage = this.changePage.bind(this);\n  }\n\n  validateEmail(email) {\n    if (email.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/)) {\n      this.setState({ checkEmail: true }, () => this.validateLogin());\n    } else this.setState({ checkEmail: false }, () => this.validateLogin());\n  }\n\n  validatePassword(password) {\n    const minimumLength = 6;\n    if (password.length >= minimumLength) {\n      this.setState({ checkPassword: true }, () => this.validateLogin());\n    } else this.setState({ checkPassword: false }, () => this.validateLogin());\n  }\n\n  validateLogin() {\n    const { checkEmail, checkPassword } = this.state;\n    return checkEmail && checkPassword\n      ? this.setState({ buttonDisable: false }) : this.setState({ buttonDisable: true });\n  }\n\n  handleChange({ target }) {\n    const { id, value } = target;\n\n    this.setState({ [id]: value });\n\n    if (id === 'email') this.validateEmail(value);\n    if (id === 'password') this.validatePassword(value);\n  }\n\n  changePage() {\n    const { history, storeEmail } = this.props;\n    const { email } = this.state;\n    storeEmail(email);\n    history.push('/carteira');\n  }\n\n  renderInputs() {\n    const { email, password } = this.state;\n    return (\n      <>\n        <label htmlFor=\"email\">\n          Email:\n          <input\n            data-testid=\"email-input\"\n            value={ email }\n            id=\"email\"\n            type=\"email\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"password\">\n          Senha:\n          <input\n            data-testid=\"password-input\"\n            value={ password }\n            id=\"password\"\n            type=\"password\"\n            onChange={ this.handleChange }\n          />\n        </label>\n      </>);\n  }\n\n  render() {\n    const { buttonDisable } = this.state;\n    return (\n      <>\n        <h1>Trybe Wallet</h1>\n        <img src={ bitcoinGif } alt=\"bitcoin gif\" />\n        <form>\n          {this.renderInputs()}\n          <button\n            disabled={ buttonDisable }\n            type=\"button\"\n            onClick={ this.changePage }\n          >\n            Entrar\n\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  storeEmail: (payload) => dispatch(getUserEmail(payload)),\n});\n\nLogin.propTypes = {\n  history: PropTypes.object,\n}.isRequired;\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass WalletInputs extends Component {\n  render() {\n    const { labelText, id, onChange, value } = this.props;\n    return (\n      <label htmlFor={ id }>\n        {labelText}\n        <input value={ value } onChange={ onChange } id={ id } type=\"text\" />\n      </label>\n    );\n  }\n}\n\nWalletInputs.propTypes = {\n  labelText: PropTypes.string,\n}.isRequired;\n\nexport default WalletInputs;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass WalletSelect extends Component {\n  render() {\n    const { labelText, id, ariaLabel, onChange, currencies, value } = this.props;\n    return (\n      <label htmlFor={ id }>\n        {labelText}\n        <select value={ value } onChange={ onChange } aria-label={ ariaLabel } id={ id }>\n          {currencies.map((coin) => <option key={ coin } value={ coin }>{coin}</option>)}\n        </select>\n      </label>\n    );\n  }\n}\n\nWalletSelect.propTypes = {\n  labelText: PropTypes.string,\n}.isRequired;\n\nexport default WalletSelect;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteRow } from '../actions';\n\nclass WalletTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDelete = this.handleDelete.bind(this);\n  }\n\n  handleDelete(itemId) {\n    const { deleteSpent } = this.props;\n    deleteSpent(itemId);\n  }\n\n  renderTableHead() {\n    return (\n      <thead>\n        <tr>\n          <th>Descrição</th>\n          <th>Tag</th>\n          <th>Método de pagamento</th>\n          <th>Valor</th>\n          <th>Moeda</th>\n          <th>Câmbio utilizado</th>\n          <th>Valor convertido</th>\n          <th>Moeda de conversão</th>\n          <th>Editar/Excluir</th>\n        </tr>\n      </thead>\n    );\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table>\n        {this.renderTableHead()}\n        <tbody>\n          {expenses.map((item) => (\n            <tr key={ item.id } style={ { textAlign: 'center' } }>\n              <td>{item.description}</td>\n              <td>{item.tag}</td>\n              <td>{item.method}</td>\n              <td>{`${item.currency} ${parseInt(item.value, 10).toFixed(2)}`}</td>\n              <td>{item.exchangeRates[item.currency].name.split('/')[0]}</td>\n              <td>\n                {`R$ ${parseFloat(item\n                  .exchangeRates[item.currency].ask).toFixed(2)}`}\n              </td>\n              <td>\n                {`R$ ${(item\n                  .exchangeRates[item.currency].ask * item.value).toFixed(2)}`}\n              </td>\n              <td>{item.exchangeRates[item.currency].name.split('/')[1]}</td>\n              <td>\n                <button\n                  onClick={ () => this.handleDelete(item.id) }\n                  data-testid=\"delete-btn\"\n                  type=\"button\"\n                >\n                  Apagar\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nWalletTable.propTypes = {\n  expenses: PropTypes.array,\n}.isRequired;\n\nconst mapStateToProps = ({ wallet }) => ({\n  expenses: wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteSpent: (payload) => dispatch(deleteRow(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletTable);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addSpent, getCoins } from '../actions';\nimport WalletInput from '../components/WalletInput';\nimport WalletSelect from '../components/WalletSelect';\nimport WalletTable from '../components/WalletTable';\n\nclass Wallet extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expenses: {\n        value: '',\n        description: '',\n        currency: 'USD',\n        method: 'dinheiro',\n        tag: 'Alimentação',\n      },\n      addButton: true,\n    };\n\n    this.renderHeader = this.renderHeader.bind(this);\n    this.renderForms = this.renderForms.bind(this);\n    this.getCoinsOptions = this.getCoinsOptions.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleExpenses = this.handleExpenses.bind(this);\n    this.totalExpenses = this.totalExpenses.bind(this);\n    this.checkInputs = this.checkInputs.bind(this);\n  }\n\n  componentDidMount() {\n    this.getCoinsOptions();\n  }\n\n  componentDidUpdate() {\n    this.totalExpenses();\n  }\n\n  getCoinsOptions() {\n    const { fetchCoins } = this.props;\n    fetchCoins();\n  }\n\n  handleExpenses() {\n    const { dispatchSpent } = this.props;\n    const { expenses } = this.state;\n\n    const inicialState = {\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'dinheiro',\n      tag: 'Alimentação',\n    };\n\n    dispatchSpent(expenses);\n    this.setState({ expenses: inicialState });\n  }\n\n  checkInputs() {\n    const { expenses: { value, description } } = this.state;\n    return value && description\n      ? this.setState({ addButton: false }) : this.setState({ addButton: true });\n  }\n\n  handleChange({ target }) {\n    const { expenses } = this.state;\n    const { id, value } = target;\n    this.setState({ expenses: {\n      ...expenses,\n      [id]: value,\n    } });\n    this.checkInputs();\n  }\n\n  totalExpenses() {\n    const { expenses } = this.props;\n    return expenses.reduce((itemAcc, item) => {\n      const convertedValue = item.exchangeRates[item.currency].ask;\n      itemAcc += item.value * convertedValue;\n      return itemAcc;\n    }, 0).toFixed(2);\n  }\n\n  renderHeader() {\n    const { email } = this.props;\n    return (\n      <header>\n        <span\n          data-testid=\"email-field\"\n        >\n          {email}\n        </span>\n        <span\n          data-testid=\"total-field\"\n        >\n          {`Despesa Total: ${this.totalExpenses()}`}\n        </span>\n        <span\n          data-testid=\"header-currency-field\"\n        >\n          BRL\n        </span>\n      </header>\n    );\n  }\n\n  renderForms() {\n    const { currencies } = this.props;\n    const { expenses } = this.state;\n    return (\n      <form>\n        <WalletInput\n          value={ expenses.value }\n          labelText=\"Valor:\"\n          id=\"value\"\n          onChange={ this.handleChange }\n        />\n        <WalletInput\n          value={ expenses.description }\n          labelText=\"Descrição:\"\n          id=\"description\"\n          onChange={ this.handleChange }\n        />\n        <WalletSelect\n          labelText=\"Moeda:\"\n          id=\"currency\"\n          ariaLabel=\"moeda\"\n          onChange={ this.handleChange }\n          currencies={ currencies }\n        />\n        <label htmlFor=\"method\">\n          Método de pagamento:\n          <select\n            onChange={ this.handleChange }\n            aria-label=\"método de pagamento\"\n            id=\"method\"\n          >\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag\">\n          Tag:\n          <select onChange={ this.handleChange } name=\"tag\" id=\"tag\">\n            <option value=\"Alimentação\">Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </label>\n      </form>\n    );\n  }\n\n  render() {\n    const { addButton } = this.state;\n    return (\n      <>\n        {this.renderHeader()}\n        <div>\n          {this.renderForms()}\n          <button\n            onClick={ this.handleExpenses }\n            type=\"button\"\n            disabled={ addButton }\n          >\n            Adicionar despesa\n          </button>\n        </div>\n        <WalletTable />\n      </>);\n  }\n}\n\nconst mapStateToProps = ({ user, wallet }) => ({\n  email: user.email,\n  currencies: wallet.currencies,\n  expenses: wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCoins: () => dispatch(getCoins()),\n  dispatchSpent: (payload) => dispatch(addSpent(payload)),\n});\n\nWallet.propTypes = {\n  email: PropTypes.string,\n  fetchCoins: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { GET_USER_EMAIL } from '../actions';\n\nconst INICIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INICIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_USER_EMAIL:\n    return {\n      ...state,\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","import {\n  COINS_LOADING,\n  COINS_SUCCESS,\n  COINS_FAIL,\n  SPENT_SUCCESS,\n  DELETE_ITEM } from '../actions';\n\nconst INICIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nconst wallet = (state = INICIAL_STATE, action) => {\n  switch (action.type) {\n  case COINS_LOADING:\n    return {\n      ...state,\n      isLoading: true,\n    };\n  case COINS_SUCCESS:\n    return {\n      ...state,\n      isLoading: false,\n      currencies: action.coins,\n    };\n  case COINS_FAIL:\n    return {\n      ...state,\n      isLoading: false,\n      error: action.error,\n    };\n  case SPENT_SUCCESS:\n    return {\n      ...state,\n      expenses: [...state.expenses, { ...action.spent, id: state.expenses.length }],\n      isLoading: false,\n    };\n  case DELETE_ITEM:\n    return {\n      ...state,\n      expenses: state.expenses.filter(({ id }) => id !== action.itemId),\n    };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\n\nReactDOM.render(\n  <BrowserRouter basename=\"/trybe-wallet\">\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}